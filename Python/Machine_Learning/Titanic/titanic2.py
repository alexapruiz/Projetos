# -*- coding: utf-8 -*-
"""Titanic2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ns8zh2UvTXNrzKrTgvbXVTrbwv7Au1f6
"""

#Importa as bibliotecas
import pandas as pd
import numpy as np

#Cria a função que vai gerar uma coluna binária para o sexo (Male -> 0 e Female -> 1)
def transformar_sexo(valor):
  if valor == 'female':
    return 1
  else:
    return 0

#Importa os arquivos do Kaggle
train = pd.read_csv("..\\..\\..\\_Arquivos\\Titanic\\train.csv",sep=';')
test = pd.read_csv("..\\..\\..\\_Arquivos\\Titanic\\test.csv",sep=';')

#Criando o campo 'Sexo_binario'
train['Sex_binario'] = train['Sex'].map(transformar_sexo)
test['Sex_binario'] = test['Sex'].map(transformar_sexo)

#Criando outros campos para tentar melhorar o modelo
train['Embarked_S'] = (train['Embarked'] == 'S').astype(int)
train['Embarked_C'] = (train['Embarked'] == 'C').astype(int)
train['Embarked_Q'] = (train['Embarked'] == 'Q').astype(int)
train['Cabine_Nula'] = train['Cabin'].isnull().astype(int)
train['Nome_Contem_Miss'] = train['Name'].str.contains('Miss').astype('int')
train['Nome_Contem_Mrs'] = train['Name'].str.contains('Mrs').astype('int')
train['Nome_Contem_Master'] = train['Name'].str.contains('Master').astype('int')
train['Nome_Contem_Col'] = train['Name'].str.contains('Col').astype('int')
train['Nome_Contem_Major'] = train['Name'].str.contains('Major').astype('int')
train['Nome_Contem_Mr'] = train['Name'].str.contains('Mr').astype('int')

#Definindo os campos a serem analisados
#variaveis = ['Sex_binario', 'Age', 'Pclass', 'SibSp','Parch', 'Fare']
variaveis = ['Sex_binario', 'Age', 'Pclass', 'SibSp','Parch', 'Fare','Embarked_S','Embarked_C','Embarked_Q','Cabine_Nula','Nome_Contem_Miss','Nome_Contem_Mrs','Nome_Contem_Master','Nome_Contem_Col','Nome_Contem_Major','Nome_Contem_Mr','Survived']

#Substituindo dados Nan por -1
X = train[variaveis].fillna(-1)
y=train['Survived']

#Importando as bibliotecas de Machine Learning
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RepeatedKFold

#Usando uma técnica de reamostragem -> Validação Cruzada
resultados2 = []
kf = RepeatedKFold(n_splits=2, n_repeats=10, random_state=10)

for linhas_treino, linhas_valid in kf.split(X):
  print('Treino: ', linhas_treino.shape[0])
  print('Teste: ', linhas_valid.shape[0])

  X_treino , X_valid = X.iloc[linhas_treino], X.iloc[linhas_valid]
  y_treino , y_valid = y.iloc[linhas_treino], y.iloc[linhas_valid]

  modelo = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=0)
  modelo.fit(X_treino, y_treino)
  p = modelo.predict(X_valid)
  acc = np.mean(y_valid == p)
  resultados2.append(acc)
  print('Acc: ',acc)
  print('')

np.mean(resultados2)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %pylab inline

ultimo_score='0.8041457147175896'
np.mean(resultados2)

pylab.hist(resultados2)

#Retreinar o modelo
modelo = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=0)
modelo.fit(X, y)
p = modelo.predict(test[variaveis].fillna(-1))
p

"""# Tentando melhorar o modelo"""

#Analisando os dados e observando as previsões erradas, geradas pelo modelo
X_valid_check = train.iloc[linhas_valid].copy()
X_valid_check['p'] = p
X_valid_check.head()

#Verificando os registros que o modelo errou a previsão
erros = X_valid_check[X_valid_check['Survived'] != X_valid_check['p']]

#Reordenando as colunas, para colocar as colunas de previsão e Sobreviventes lado a lado
erros = erros[['PassengerId','Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Fare','Cabin','Embarked','Sex_binario','p','Survived']]

erros.head()

mulheres = erros[erros['Sex'] == 'female']
homens = erros[erros['Sex'] == 'male']

mulheres.sort_values('Survived')

"""# Analisando outras variáveis para melhorar a performance do modelo"""

#Criando outros campos para tentar melhorar o modelo
train['Embarked_S'] = (train['Embarked'] == 'S').astype(int)
train['Embarked_C'] = (train['Embarked'] == 'C').astype(int)
train['Embarked_Q'] = (train['Embarked'] == 'Q').astype(int)
train['Cabine_Nula'] = train['Cabin'].isnull().astype(int)
train['Nome_Contem_Miss'] = train['Name'].str.contains('Miss').astype('int')
train['Nome_Contem_Mrs'] = train['Name'].str.contains('Mrs').astype('int')
train['Nome_Contem_Master'] = train['Name'].str.contains('Master').astype('int')
train['Nome_Contem_Col'] = train['Name'].str.contains('Col').astype('int')
train['Nome_Contem_Major'] = train['Name'].str.contains('Major').astype('int')
train['Nome_Contem_Mr'] = train['Name'].str.contains('Mr').astype('int')

train.head()



# Gerando as previsões
sub = pd.Series(p, index=test['PassengerId'], name='Survived')
sub

# Criando um arquivo csv com o resultado
sub.to_csv('Modelo_gerado_Video_5.csv', header=True)

train.head()